name: Test Recipe Robot

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'app/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'app/**'
      - '.github/workflows/test.yml'

jobs:
  test:
    name: Test on macOS ${{ matrix.macos-version }}
    runs-on: ${{ matrix.runner }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - macos-version: "15"
            runner: macos-15
          - macos-version: "14"
            runner: macos-14

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: System Information
      run: |
        echo "üñ•Ô∏è  Testing Recipe Robot on macOS ${{ matrix.macos-version }}"
        echo "Runner: ${{ matrix.runner }}"
        echo "macOS version: $(sw_vers -productVersion)"
        echo "Build version: $(sw_vers -buildVersion)"
        echo "Xcode version: $(xcodebuild -version)"
        echo "Available SDKs:"
        xcodebuild -showsdks | grep macosx

    - name: Install Carthage
      run: |
        if ! command -v carthage &> /dev/null; then
          echo "üì¶ Installing Carthage via Homebrew..."
          brew install carthage
        else
          echo "üì¶ Carthage already available: $(carthage version)"
        fi

    - name: Bootstrap Dependencies
      run: |
        cd app
        echo "üîß Bootstrapping Carthage dependencies..."
        carthage bootstrap --platform macOS --use-xcframeworks --cache-builds
        echo "‚úÖ Dependencies installed successfully"

    - name: Build and Test
      env:
        CI_SKIP_SIGNING: "YES"
        CI: "true"
      run: |
        cd app
        echo "üß™ Building and testing Recipe Robot..."
        echo "CI_SKIP_SIGNING is: $CI_SKIP_SIGNING"

        # Try building and testing in one command
        xcodebuild test \
          -workspace "Recipe Robot.xcworkspace" \
          -scheme "Recipe Robot" \
          -destination 'platform=macOS' \
          -enableCodeCoverage YES \
          -derivedDataPath DerivedData \
          -quiet \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="-" \
          CODE_SIGNING_ALLOWED=NO \
          DEVELOPMENT_TEAM="" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          CODE_SIGN_ENTITLEMENTS="" \
          CODE_SIGN_STYLE=Manual \
          EXPANDED_CODE_SIGN_IDENTITY_NAME="-" \
          SKIP_INSTALL=YES

    - name: Test Results Summary
      if: always()
      run: |
        cd app
        echo "üìä Test Results Summary for macOS ${{ matrix.macos-version }}:"
        if [ -d "DerivedData/Logs/Test" ]; then
          echo "‚úÖ Test logs generated successfully"
          find DerivedData/Logs/Test -name "*.xcresult" | head -5
        else
          echo "‚ùå No test logs found"
          echo "Checking for build logs..."
          find DerivedData/Logs -type f | head -10 || echo "No logs found"
        fi
