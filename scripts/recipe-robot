#!/usr/local/autopkg/python
# This Python file uses the following encoding: utf-8

# Recipe Robot
# Copyright 2015-2025 Elliot Jordan, Shea G. Craig, and Eldon Ahrold
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


"""
recipe-robot

Easily and automatically create AutoPkg recipes.
"""


import argparse
import os
import pprint
import pwd
import shutil
import subprocess
import sys
import traceback
from pathlib import Path

# Test for platform here, before we try to import any PyObjC stuff.
# pylint: disable=wrong-import-position
if sys.platform != "darwin":
    print("Recipe Robot requires macOS.")
    sys.exit(1)

# Warn if trying to run on Python 2
if sys.version_info.major < 3:
    print("ERROR: This version of Recipe Robot requires AutoPkg 2 and Python 3.")
    sys.exit(1)

# TODO: Clean up importing from our library.
import recipe_robot_lib
from recipe_robot_lib import tools
from recipe_robot_lib.exceptions import RoboError, RoboException
from recipe_robot_lib.facts import Facts
from recipe_robot_lib.inspect import process_input_path
from recipe_robot_lib.recipe import Recipes
from recipe_robot_lib.tools import (
    ALL_SUPPORTED_FORMATS,
    CACHE_DIR,
    LogLevel,
    OutputMode,
    __version__,
    congratulate,
    create_dest_dirs,
    get_user_defaults,
    print_death_text,
    print_welcome_text,
    robo_print,
    save_user_defaults,
)


def main():
    """Make the magic happen."""

    facts = Facts()

    if not Path("/usr/local/bin/autopkg").is_file():
        robo_print(
            "Recipe Robot requires AutoPkg. Please download and install the "
            "latest version: https://github.com/autopkg/autopkg/releases/latest",
            LogLevel.ERROR,
        )
        sys.exit(1)

    try:
        setup(facts)
        if not facts["args"].app_mode:
            print_welcome_text()
        prefs = init_prefs(facts)
        first_timer = prefs.get("RecipeCreateCount", 0) == 0

        # Collect facts from the input path, based on the type of path.
        # TODO: Standardize on always returning Facts, even though they
        # are passed by reference, to remove ambiguity about what is happening.
        process_input_path(facts)

        # Time the execution of generating recipes.
        # pylint: disable=assignment-from-no-return
        time, _ = recipe_robot_lib.generate_recipes(facts, prefs)
        # pylint: enable=assignment-from-no-return
        facts["execution_time"] = time

        # Pat on the back!
        congratulate(prefs, first_timer)
    except KeyboardInterrupt:
        robo_print("\n", LogLevel.LOG)
        robo_print("Recipe Robot was killed by Control-C.", LogLevel.ERROR)
        sys.exit(0)
    except RoboError as error:
        message = str(error)
        if OutputMode.debug_mode and error.error:
            message += error.error

        facts["errors"].append(message)
        print_death_text()
        sys.exit(1)
    # TODO: Any code requiring exceptions should do local handling, then
    # re-raise as a RoboException subclass.
    except (RoboException, Exception) as error:  # pylint: disable=broad-except
        message = "Recipe Robot exploded with unexpected error: %s" % str(error)
        if facts["args"].verbose:
            message += "\n%s" % traceback.format_exc()
        else:
            message += "\nRun with -v/--verbose for more info."
        facts["errors"].append(message)
        print_death_text()
        sys.exit(1)
    finally:
        # Clean up cache folder.
        if Path(CACHE_DIR).exists() and not facts["args"].keep_cache:
            try:
                shutil.rmtree(CACHE_DIR)
            except PermissionError:
                try:
                    # Rarely, pkgs unpack files that are not user-writeable
                    cmd = ["/bin/chmod", "-R", "u+w", CACHE_DIR]
                    _ = subprocess.run(cmd, check=False)
                    shutil.rmtree(CACHE_DIR)
                except (PermissionError, OSError):
                    # If we still can't remove the cache, just log and continue
                    robo_print(
                        f"Could not remove cache directory {CACHE_DIR}",
                        LogLevel.WARNING,
                    )

        # Make sure to reset the terminal color.
        recipe_robot_lib.tools.reset_term_colors()

        # If debug is on, print all the things.
        if OutputMode.debug_mode:
            debug_dump(
                {
                    "Supported file formats": ALL_SUPPORTED_FORMATS,
                    "Preferences for this session": prefs,
                    "Facts we have collected": facts,
                }
            )


def setup(facts):
    """Parse args, set state for recipe generation, and setup cache.

    Args:
        facts (RoboDict): A continually-updated dictionary containing all the
            information we know so far about the app associated with the
            input path.
    """
    # Parse command line arguments.
    argparser = build_argument_parser()
    args = argparser.parse_args()

    tools.color_setting = not args.app_mode

    # If neither input path nor --config arg was specified, print help and exit.
    if not args.input_path and not args.config:
        argparser.print_help()
        sys.exit(0)

    facts["args"] = args
    configure_from_args(facts)

    # Create the master recipe information list.
    facts["recipes"] = Recipes()

    # Make someplace to cache things.
    create_dest_dirs(CACHE_DIR)


def build_argument_parser():
    """Build and return the argument parser for Recipe Robot.

    Returns:
        ArgumentParser: Parser object used for storing command line arguments.
    """
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "input_path",
        nargs="?",
        help="Path from which to derive AutoPkg recipes. This can be one of "
        "the following: existing app, Sparkle feed, GitHub URL, "
        "BitBucket URL, SourceForge URL, or direct download URL.",
    )
    parser.add_argument(
        "--app-mode",
        action="store_true",
        help="Strip colors from Recipe Robot output. Designed for improved "
        "interoperability with the Recipe Robot native macOS app.",
    )
    parser.add_argument(
        "--config",
        "--configure",
        "-c",
        action="store_true",
        help="Adjust Recipe Robot preferences prior to generating recipes.",
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Generate extremely detailed output. Meant to help trace issues "
        "with Recipe Robot. (Debug mode also enables verbose output.)",
    )
    parser.add_argument(
        "--ignore-existing",
        action="store_true",
        help='Creates recipes even if "autopkg search" results show that '
        "recipes already exist for this app.",
    )
    parser.add_argument(
        "--keep-cache",
        action="store_true",
        help="Keep the Recipe Robot cache, instead of performing the usual "
        "cleanup. This allows you to manually inspect the files Recipe "
        "Robot downloaded. The cache will be cleared again upon next "
        "run.",
    )
    parser.add_argument(
        "--skip-icon",
        action="store_true",
        help="Do not extract an icon from the source app.",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Generate additional output about the process.",
    )
    return parser


def configure_from_args(facts):
    """Perform validation and reporting on args.

    Args:
        facts (RoboDict): A continually-updated dictionary containing all the
            information we know so far about the app associated with the
            input path.
    """
    args = facts["args"]
    # If --ignore-existing was specified, print a warning.
    if args.ignore_existing is True:
        facts["warnings"].append(
            'Will build recipes even if they already exist in "autopkg '
            "search\" results. Please don't upload duplicate recipes to "
            "public AutoPkg repos on GitHub."
        )

    # If --verbose was specified, set verbose mode to True.
    if args.verbose is True or OutputMode.verbose_mode is True:
        OutputMode.set_verbose_mode(True)

    # If --debug was specified, set debug mode to True.
    if args.debug is True or OutputMode.debug_mode is True:
        OutputMode.set_debug_mode(True)


def init_prefs(facts):
    """Read Recipe Robot preferences.

    Preferences are handled in the following priority order:
        1. If --config argument is specified, ignore prefs and rebuild.
        2. If preferences plist doesn't exist, rebuild.
        3. If preferences plist does exist, use it.

    Args:
        facts (RoboDict): A continually-updated dictionary containing all the
            information we know so far about the app associated with the
            input path.

    Returns:
        dict: The dictionary containing a key/value pair for Recipe Robot
            preferences.
    """
    args = facts["args"]
    recipes = facts["recipes"]

    # The preference keys that are minimally required for a basic run.
    required_pref_keys = (
        "RecipeCreateLocation",
        "RecipeIdentifierPrefix",
        "RecipeTypes",
    )

    # If prefs file exists, try to read from it.
    prefs = get_user_defaults()
    if prefs and all((prefs.get(x) for x in required_pref_keys)):
        for recipe in recipes:
            # Load preferred recipe types.
            recipe["preferred"] = recipe["type"] in prefs["RecipeTypes"]

        if args.config is True:
            robo_print("Showing configuration options...")
            prefs = build_prefs(prefs, facts)

        # This seems to be necessary in order to avoid an error when reading
        # the plist back during subsequent runs.
        recipe_create_count = prefs.get("RecipeCreateCount")
        prefs["RecipeCreateCount"] = (
            int(recipe_create_count) if recipe_create_count else 0
        )

    elif not args.app_mode:
        # The prefs file doesn't exist or is missing required keys.
        # TODO: Rebuild only the missing keys, retaining the ones that already exist.
        message = "Some required prefs not set. Building new preferences..."
        facts["warnings"].append(message)
        prefs = build_prefs({}, facts)

    else:
        robo_print(
            "Some required prefs not set.\n\nPlease open "
            "Preferences and check your settings.",
            LogLevel.ERROR,
        )
        sys.exit(1)

    # Record last version number.
    prefs["LastRecipeRobotVersion"] = __version__

    # Indicate to the app that configuration is complete.
    prefs["Initialized"] = True

    # Save preferences to disk for next time.
    save_user_defaults(prefs)

    return prefs


def build_prefs(prefs, facts):
    """Prompt user for preferences, then save them back to the plist.

    Args:
        prefs (dict): The dictionary containing a key/value pair for Recipe Robot
            preferences.
        facts (RoboDict): A continually-updated dictionary containing all the
            information we know so far about the app associated with the
            input path.

    Returns:
        prefs: The dictionary containing a key/value pair for Recipe Robot
            preferences.
    """
    recipes = facts["recipes"]
    # Start recipe count at zero, if no value already exists.
    if "RecipeCreateCount" not in prefs:
        prefs["RecipeCreateCount"] = int(0)

    get_recipe_identifier_prefix(prefs)
    get_recipe_creation_location(prefs)
    get_preferred_recipe_types(prefs, recipes)
    get_preferred_recipe_format(prefs)
    set_recipe_preferences(prefs, recipes)

    return prefs


def set_recipe_preferences(prefs, recipes):
    """Set "preferred" status of each recipe type.

    Args:
        prefs (dict): The dictionary containing a key/value pair for Recipe Robot
            preferences.
        recipes ([Recipe]): The list of recipe types known to Recipe Robot.
    """
    affirmatives = ("y", "yes", "true", "ok", "yep", "sure")

    for recipe in recipes:
        if recipe["preferred"] is True:
            prefs["RecipeTypes"].append(recipe["type"])

            # If DeployStudio recipes are among the preferred types,
            # prompt for the path of the Packages folder.
            if recipe["type"] == "ds":
                if "DSPackagesPath" not in prefs:
                    prefs["DSPackagesPath"] = "/Shared/DeployStudio/Packages"
                robo_print("\nLocation of your DeployStudio packages:")
                robo_print(
                    "This where packages will be copied in order to "
                    "appear in DeployStudio.\n"
                )
                choice = input("[%s]: " % prefs["DSPackagesPath"])
                if choice != "":
                    prefs["DSPackagesPath"] = str(choice).rstrip("/ ")

            # If Munki recipes are among the preferred types,
            # prompt for whether to strip developer suffixes like Inc and Ltd.
            if recipe["type"] == "munki":
                if prefs.get("StripDeveloperSuffixes", False) is False:
                    strip_dev_suffixes = "N"
                else:
                    strip_dev_suffixes = "Y"
                robo_print("\nStrip suffixes from developer names? (Y/N)")
                choice = input("[%s]: " % strip_dev_suffixes)
                prefs["StripDeveloperSuffixes"] = choice.lower() in affirmatives


def get_recipe_identifier_prefix(prefs):
    """Prompt for and save recipe identifier prefix.

    Args:
        prefs (dict): The dictionary containing a key/value pair for Recipe Robot
            preferences.
    """
    if "RecipeIdentifierPrefix" not in prefs:
        default_username = pwd.getpwuid(os.getuid())[0]
        if default_username == "":
            default_username = "your_name_here"
        prefs["RecipeIdentifierPrefix"] = "com.github.%s" % default_username
    robo_print("\nRecipe identifier prefix")
    robo_print(
        "This is your default identifier, in reverse-domain "
        "notation.\n(If you have a GitHub account, it's customary to "
        "use com.github.<your GitHub username>.)\n"
    )
    choice = input("[%s]: " % prefs["RecipeIdentifierPrefix"])
    if choice != "":
        prefs["RecipeIdentifierPrefix"] = str(choice).rstrip(". ")


def get_recipe_creation_location(prefs):
    """Prompt for recipe creation location.

    Args:
        prefs (dict): The dictionary containing a key/value pair for Recipe Robot
            preferences.
    """
    if "RecipeCreateLocation" not in prefs:
        prefs["RecipeCreateLocation"] = tools.DEFAULT_RECIPE_OUTPUT_PATH
    robo_print("\nLocation to save new recipes")
    robo_print("This is where on disk your newly created recipes will be saved.\n")
    choice = input("[%s]: " % prefs["RecipeCreateLocation"])
    if choice != "":
        prefs["RecipeCreateLocation"] = str(choice).rstrip("/ ")


def get_preferred_recipe_types(prefs, recipes):
    """Prompt to set recipe types on/off as desired.

    Args:
        prefs (dict): The dictionary containing a key/value pair for Recipe Robot
            preferences.
        recipes ([Recipe]): The list of recipe types known to Recipe Robot.
    """
    prefs["RecipeTypes"] = []
    robo_print("\nPreferred recipe types")
    robo_print("Choose which recipe types will be offered to you by default.\n")
    while True:
        i = 0
        for recipe in recipes:
            indicator = "*" if recipe["preferred"] else " "
            robo_print(
                "[%s] %s. %s - %s"
                % (indicator, i, recipe["type"], recipe["description"]),
                indent=2,
            )
            i += 1
        robo_print("A: Enable all recipe types.", indent=6)
        robo_print("D: Disable all recipe types.", indent=6)
        robo_print("Q: Quit without saving changes.", indent=6)
        robo_print("S or Return: Save changes and proceed.", indent=6)
        choice = input(
            "\nType a number to toggle the corresponding recipe "
            "type between ON [*] and OFF [ ].\nWhen you're satisfied "
            'with your choices, type an "S" or press Return to '
            "save and proceed: "
        )
        if choice.upper() in ("S", ""):
            break
        elif choice.upper() == "A":
            for recipe in recipes:
                recipe["preferred"] = True
        elif choice.upper() == "D":
            for recipe in recipes:
                recipe["preferred"] = False
        elif choice.upper() == "Q":
            sys.exit(0)
        else:
            try:
                choice = int(choice)
                if recipes[choice]["preferred"] is False:
                    recipes[choice]["preferred"] = True
                else:
                    recipes[choice]["preferred"] = False
            except (ValueError, IndexError):
                invalid_option_msg = (
                    "%s is not a valid option. Please try again.\n" % choice
                )
                robo_print(invalid_option_msg, LogLevel.WARNING)
                continue

            # Automatically enable download recipe type if required.
            requires_download = (
                "munki",
                "pkg",
                "install",
                "jamf",
                "lanrev",
                "ds",
                "sccm",
                "filewave",
                "bigfix",
            )
            if recipes[choice]["type"] in requires_download:
                for recipe in recipes:
                    if recipe["type"] == "download":
                        recipe["preferred"] = True
            # Automatically enable pkg recipe type if required.
            requires_pkg = ("jamf", "lanrev", "ds", "sccm")
            if recipes[choice]["type"] in requires_pkg:
                for recipe in recipes:
                    if recipe["type"] == "pkg":
                        recipe["preferred"] = True


def get_preferred_recipe_format(prefs):
    """Prompt for file format to use for generated recipes.

    Args:
        prefs (dict): The dictionary containing a key/value pair for Recipe Robot
            preferences.
    """
    if not prefs.get("RecipeFormat"):
        prefs["RecipeFormat"] = "plist"
    robo_print("\nRecipe format")
    robo_print(
        "This is the format used for recipes generated by Recipe Robot. "
        'Valid choices are "plist" or "yaml".'
    )
    choice = input("[%s]: " % prefs.get("RecipeFormat", "plist")).strip()
    if choice.strip() not in ("plist", "yaml"):
        robo_print('%s is not a valid format. Defaulting to "plist".' % choice.strip())
        prefs["RecipeFormat"] = "plist"
    else:
        prefs["RecipeFormat"] = choice.strip()


def debug_dump(items):
    """Print all the variables we know about to output.

    Args:
        items ({dict}): A dictionary of dictionaries, containing all the items
            we will be reporting in the debug output.
    """
    for key in items.keys():
        robo_print(
            "%s:\n%s\n" % (key.upper(), pprint.pformat(items[key])), LogLevel.DEBUG
        )


if __name__ == "__main__":
    main()
